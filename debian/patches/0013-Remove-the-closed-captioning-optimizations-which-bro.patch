From: Mike Nolan <mpnolan@truefitness.com>
Date: Tue, 1 Mar 2016 09:31:55 -0600
Subject: Remove the closed captioning optimizations which broke Teletext

---
 modules/video_filter/blend.cpp | 135 +++--------------------------------------
 1 file changed, 10 insertions(+), 125 deletions(-)

diff --git a/modules/video_filter/blend.cpp b/modules/video_filter/blend.cpp
index b153b05..1fd44f3 100644
--- a/modules/video_filter/blend.cpp
+++ b/modules/video_filter/blend.cpp
@@ -61,12 +61,7 @@ static inline unsigned div255(unsigned v)
 template <typename T>
 void merge(T *dst, unsigned src, unsigned f)
 {
-    /* If 100% opacity, skip the alpha-blending operation and just replace 
-       the dst with src (most common case for EIA-608 SPU decoding) */
-    if (likely(f == 0xff))
-        *dst = src;
-    else
-        *dst = div255((255 - f) * (*dst) + src * f);
+    *dst = div255((255 - f) * (*dst) + src * f);
 }
 
 struct CPixel {
@@ -92,13 +87,6 @@ public:
     {
         return true;
     }
-	int pixelAlphaNonzero(unsigned dx, unsigned line_remaining, unsigned width, unsigned height, unsigned char *nextalphabyte) const
-    {
-        /* Overload this function for specific pixel types to optimize
-           the process of finding non-transparent pixels (which for blending
-           stuff like SPUs is almost all of them) */
-        return 1;
-    }
 
 protected:
     template <unsigned ry>
@@ -120,10 +108,8 @@ public:
         data[0] = CPicture::getLine< 1>(0);
         data[1] = CPicture::getLine<ry>(swap_uv ? 2 : 1);
         data[2] = CPicture::getLine<ry>(swap_uv ? 1 : 2);
-        if (has_alpha) {
+        if (has_alpha)
             data[3] = CPicture::getLine<1>(3);
-            curloc = &data[3][0];
-        }
     }
     void get(CPixel *px, unsigned dx, bool full = true) const
     {
@@ -135,84 +121,6 @@ public:
         if (has_alpha)
             px->a = *getPointer(3, dx);
     }
-    int pixelAlphaNonzero(unsigned dx, unsigned line_remaining, unsigned width, unsigned height,
-                          unsigned char *nextalphabyte)
-    {
-#define DJH_BLEND_SSE2 1
-#ifdef DJH_BLEND_SSE2
-        unsigned int ret = 0;
-
-        // Drop out immediately if first byte encountered is nonzero
-        if (*curloc != 0) {
-           *nextalphabyte = *curloc++;
-           return 1;
-        }
-
-        /* 16-byte align */
-        while ((((intptr_t)curloc) & (sizeof(__m128i)-1)) != 0)
-        {
-            if (*curloc++ != 0) {
-                *nextalphabyte = *curloc;
-                ret++;
-                return ret;
-            }
-            ++ ret;
-        }
-
-        __m128i xmm0 = _mm_setzero_si128();
-        __m128i xmm1;
-        int mask = 0;
-        while (ret < line_remaining)
-        {
-            xmm1 = _mm_load_si128((__m128i *)curloc);
-            xmm1 = _mm_cmpeq_epi8(xmm1, xmm0);
-            mask = _mm_movemask_epi8(xmm1);
-            if ((mask = _mm_movemask_epi8(xmm1)) == 0xffff)
-            {
-               /* All elements are 0, keep looking */
-               curloc += 16;
-               ret += 16;
-               continue;
-            }
-            break;
-        }
-
-        *nextalphabyte = *curloc++;
-        ret++;
-        return ret;
-#else
-        int ret = 1;
-
-        uint32_t *line_end = (uint32_t *) curloc + line_remaining - 4;
-        if (has_alpha) {
-               if (unlikely(line_remaining < 4)) {
-                   *nextalphabyte = *curloc;
-                    curloc++;
-                   return 1;
-               }
-
-            uint32_t *loc32 = (uint32_t *) curloc;
-            do {
-                if (unlikely(*loc32))
-                    break;
-                loc32++;
-            } while (likely(loc32 < line_end));
-
-            uint8_t *xcur = (uint8_t *) loc32;
-            ret = xcur - curloc;
-            if (loc32 > line_end)
-                ret -= 4;
-
-            /* We're always going to move forward by at least one */
-            if (ret == 0) {
-                *nextalphabyte = *curloc;
-                ret++;
-            }
-        }
-        curloc += ret;
-        return ret;
-#endif
-    }
     void merge(unsigned dx, const CPixel &spx, unsigned a, bool full)
     {
         ::merge(getPointer(0, dx), spx.i, a);
@@ -233,10 +141,8 @@ public:
             data[1] += picture->p[swap_uv ? 2 : 1].i_pitch;
             data[2] += picture->p[swap_uv ? 1 : 2].i_pitch;
         }
-        if (has_alpha) {
+        if (has_alpha)
             data[3] += picture->p[3].i_pitch;
-	    curloc = data[3];
-	}
     }
 private:
     pixel *getPointer(unsigned plane, unsigned dx) const
@@ -247,7 +153,6 @@ private:
             return (pixel*)&data[plane][(x + dx) /  1 * sizeof(pixel)];
     }
     uint8_t *data[4];
-    uint8_t *curloc;
 };
 
 template <bool swap_uv>
@@ -597,38 +502,18 @@ void Blend(const CPicture &dst_data, const CPicture &src_data,
     TSrc src(src_data);
     TDst dst(dst_data);
     TConvert convert(dst_data.getFormat(), src_data.getFormat());
-    CPixel spx;
-    unsigned int a;
-    unsigned char srca = 0;
-    int nextpix;
-    int remaining;
 
     for (unsigned y = 0; y < height; y++) {
-        remaining = width;
-        for (unsigned x = 0; remaining > 0;) {
-             nextpix = src.pixelAlphaNonzero(x, remaining, width, height, &srca);
-            if (likely(nextpix > 1)) {
-                remaining -= nextpix;
-                continue;
-            }
-            x = width - remaining;
-            remaining--;
-
-            if (srca == 0)
-                continue; 
+        for (unsigned x = 0; x < width; x++) {
+            CPixel spx;
 
-            /* A high percentage of cases have the source image as 
-               opaque, so optimize for this case */
-            if (alpha == 0xff)
-                a = srca;
-            else
-                a = div255(alpha * srca);
-
-            /* Since we know we're going to actually blend the pixels, now grab their
-               properties */
-            src.get(&spx, x, true);
+            src.get(&spx, x);
             convert(spx);
 
+            unsigned a = div255(alpha * spx.a);
+            if (a <= 0)
+                continue;
+
             if (dst.isFull(x))
                 dst.merge(x, spx, a, true);
             else
